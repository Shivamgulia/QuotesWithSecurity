{"version":3,"sources":["components/auth/AuthForm.module.css","components/auth/AuthForm.js","pages/AuthPage.js"],"names":["module","exports","AuthForm","history","useHistory","useState","showPassword","setShowPassword","authCtx","useContext","AuthContext","emailInputRef","useRef","passwordInputRef","fnameRef","lnameRef","isLogin","setIsLogin","isLoading","setIsLoading","event","a","preventDefault","enteredEmail","current","value","enteredPassword","enteredFName","enteredLName","hashPassword","bcrypt","hashSync","url","user","firstName","lastName","userName","password","roles","fetch","method","body","JSON","stringify","headers","response","json","data","ok","Error","message","then","res","errorMessage","error","experationTime","Date","getTime","login","token","toISOString","replace","catch","err","alert","className","classes","auth","onSubmit","control","htmlFor","type","id","required","ref","onClick","actions","toggle","prevState","AuthPage"],"mappings":"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","file":"static/js/5.d07f4d15.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"AuthForm_auth__2ZSKH\",\"control\":\"AuthForm_control__1evQ4\",\"actions\":\"AuthForm_actions__25Vmz\",\"toggle\":\"AuthForm_toggle__1Wxr6\"};","import { useState, useRef, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport bcrypt from 'bcryptjs';\n\nimport AuthContext from '../../store/auth-context';\nimport classes from './AuthForm.module.css';\n\nconst AuthForm = () => {\n  const history = useHistory();\n\n  const [showPassword, setShowPassword] = useState(false);\n  const authCtx = useContext(AuthContext);\n\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  const fnameRef = useRef();\n  const lnameRef = useRef();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const toggleShowPassword = () => {\n    if (showPassword) setShowPassword(false);\n    if (!showPassword) setShowPassword(true);\n  };\n\n  async function submitionHandler(event) {\n    event.preventDefault();\n\n    const enteredEmail = emailInputRef.current.value;\n    const enteredPassword = passwordInputRef.current.value;\n    let url;\n    if (!isLogin) {\n      const enteredFName = fnameRef.current.value;\n      const enteredLName = lnameRef.current.value;\n      const hashPassword = bcrypt.hashSync(enteredPassword, 10);\n\n      url =\n        'http\"//ec2-13-233-232-148.ap-south-1.compute.amazonaws.com:8080/v1/signup';\n      const user = {\n        firstName: enteredFName,\n        lastName: enteredLName,\n        userName: enteredEmail,\n        password: hashPassword,\n        roles: [5],\n      };\n      // console.log(user);\n      const response = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(user),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      const data = await response.json();\n      // console.log(response);\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Could not add comment.');\n      }\n    }\n\n    setIsLoading(true);\n\n    url =\n      'http://ec2-13-233-232-148.ap-south-1.compute.amazonaws.com:8080/api/v1/auth/login'; //login send req url\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        userName: enteredEmail,\n        password: enteredPassword,\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => {\n        setIsLoading(false);\n        if (res.ok) {\n          return res.json();\n        } else {\n          return res.json().then((data) => {\n            let errorMessage = 'Authentication Failed';\n            if (data && data.error && data.error.message) {\n              errorMessage = data.error.message;\n            }\n            throw new Error(errorMessage);\n          });\n        }\n      })\n      .then((data) => {\n        const experationTime = new Date(new Date().getTime() + +36000000);\n        authCtx.login(data.token, experationTime.toISOString());\n        history.replace('/');\n      })\n      .catch((err) => {\n        alert(err.message);\n      });\n  }\n\n  return (\n    <section className={classes.auth}>\n      <h1>{isLogin ? 'Login' : 'Sign Up'}</h1>\n      {/* <h1>Login</h1> */}\n      <form onSubmit={submitionHandler}>\n        {!isLogin && (\n          <div className={classes.control}>\n            <label htmlFor=\"firstName\">Your First Name</label>\n            <input type=\"firstName\" id=\"firstName\" required ref={fnameRef} />\n          </div>\n        )}\n        {!isLogin && (\n          <div className={classes.control}>\n            <label htmlFor=\"lastName\">Your Last Name</label>\n            <input type=\"name\" id=\"LastName\" required ref={lnameRef} />\n          </div>\n        )}\n        <div className={classes.control}>\n          <label htmlFor=\"email\">Your Email</label>\n          <input type=\"userName\" id=\"userName\" required ref={emailInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"password\">Your Password</label>\n          <input\n            type={showPassword ? 'text' : 'password'}\n            id=\"password\"\n            required\n            ref={passwordInputRef}\n          />\n        </div>\n        <input type=\"checkbox\" onClick={toggleShowPassword} /> Show Password\n        <div className={classes.actions}>\n          {!isLoading && (\n            <button>{isLogin ? 'Login' : 'Create Account'}</button>\n          )}\n          {isLoading && <p>Sending Request....</p>}\n          <button\n            type=\"button\"\n            className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {isLogin ? 'Create new account' : 'Login with existing account'}\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm;\n","import AuthForm from '../components/auth/AuthForm';\n\nconst AuthPage = () => {\n  return <AuthForm />;\n};\n\nexport default AuthPage;\n"],"sourceRoot":""}