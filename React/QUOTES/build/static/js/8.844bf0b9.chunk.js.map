{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","authorInputRef","useRef","quoteInputRef","useState","focusState","setFocusState","when","message","location","onFocus","console","log","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredQuote","onAddQuote","author","quote","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","authCtx","useContext","AuthContext","useHttp","addQuote","sendRequest","status","history","useHistory","useEffect","push","quoteData","token"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,KAAO,qB,oBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,2FCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,0BCsE/BC,EAlEG,SAACL,GACjB,IAAMM,EAAiBC,mBACjBC,EAAgBD,mBACtB,EAAoCE,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAwBA,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CACEC,KAAMF,EACNG,QAAS,SAACC,GAAD,MACP,0EAGJ,cAAC,EAAD,UACE,uBACEC,QAdiB,WACvBJ,GAAc,GACdK,QAAQC,IAAIP,IAaNT,UAAWC,IAAQgB,KACnBC,SAlCR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBhB,EAAeiB,QAAQC,MACvCC,EAAejB,EAAce,QAAQC,MAI3CxB,EAAM0B,WAAW,CACfC,OAAQL,EACRM,MAAOH,KAqBL,UAKGzB,EAAM6B,WACL,qBAAK5B,UAAWC,IAAQ4B,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK9B,UAAWC,IAAQ8B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK9B,OAEtC,sBAAKL,UAAWC,IAAQ8B,QAAxB,UACE,uBAAOC,QAAQ,QAAf,kBACA,0BAAUE,GAAG,QAAQE,KAAK,IAAID,IAAK5B,OAErC,qBAAKP,UAAWC,IAAQoC,QAAxB,SACE,wBAAQC,QArCY,WAC5B5B,GAAc,IAoCkCV,UAAU,MAAlD,kC,wBCnCGuC,UApBE,WACf,IAAMC,EAAUC,qBAAWC,KAC3B,EAAgCC,YAAQC,KAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OACfC,EAAUC,cAEhBC,qBAAU,WACO,cAAXH,GACFC,EAAQG,KAAK,aAEd,CAACJ,EAAQC,IAMZ,OACE,cAAC,EAAD,CAAWnB,UAAsB,YAAXkB,EAAsBrB,WALtB,SAAC0B,GACvBN,EAAY,CAAEM,YAAWC,MAAOZ,EAAQY","file":"static/js/8.844bf0b9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__3Ndw9\",\"loading\":\"QuoteForm_loading__iDpS0\",\"control\":\"QuoteForm_control__2lCiE\",\"actions\":\"QuoteForm_actions__354La\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { useRef, useState, Fragment } from 'react';\nimport { Prompt } from 'react-router-dom';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const quoteInputRef = useRef();\n  const [focusState, setFocusState] = useState(false);\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredQuote = quoteInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({\n      author: enteredAuthor,\n      quote: enteredQuote,\n    });\n  }\n\n  const finishEnteringHandler = () => {\n    setFocusState(false);\n  };\n\n  const formFocusHandler = () => {\n    setFocusState(true);\n    console.log(focusState);\n  };\n  return (\n    <Fragment>\n      <Prompt\n        when={focusState}\n        message={(location) =>\n          'Are you sure you want to leave this page. All your data will be lost'\n        }\n      />\n      <Card>\n        <form\n          onFocus={formFocusHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"quote\">Text</label>\n            <textarea id=\"quote\" rows=\"5\" ref={quoteInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={finishEnteringHandler} className=\"btn\">\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import react, { useContext, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport QuoteForm from '../components/quotes/QuoteForm';\nimport useHttp from '../components/hooks/use-http';\nimport { addQuote } from '../components/lib/api';\nimport AuthContext from '../store/auth-context';\n\nconst NewQuote = () => {\n  const authCtx = useContext(AuthContext);\n  const { sendRequest, status } = useHttp(addQuote);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (status === 'completed') {\n      history.push('/quotes');\n    }\n  }, [status, history]);\n\n  const addQuoteHandler = (quoteData) => {\n    sendRequest({ quoteData, token: authCtx.token });\n    // console.log(quoteData);\n  };\n  return (\n    <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />\n  );\n};\n\nexport default NewQuote;\n"],"sourceRoot":""}