{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","quotes","ascending","match","useRouteMatch","History","useHistory","Location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","url","list","map","quote","NoQuotesFound","noquotes","AllQuotes","authCtx","useContext","AuthContext","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","token","useCallback","LoadingSpinner","length"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,KAAO,0B,oBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,oBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,0FCkBdC,EAhBG,SAACC,GACjB,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,cAAC,IAAD,CAAMJ,UAAU,MAAMK,GAAE,kBAAaN,EAAMO,IAA3C,iC,kBCuCSC,EAnCG,SAACR,GACjB,IAXkBS,EAAQC,EAWpBC,EAAQC,cACRC,EAAUC,cACVC,EAAWC,cAIXC,EAAiD,QAFnC,IAAIC,gBAAgBH,EAASI,QAEVC,IAAI,QAErCC,GAnBYZ,EAmBcT,EAAMS,OAnBZC,EAmBoBO,EAlBvCR,EAAOa,MAAK,SAACC,EAAQC,GAC1B,OAAId,EACKa,EAAOhB,GAAKiB,EAAOjB,GAAK,GAAK,EAE7BgB,EAAOhB,GAAKiB,EAAOjB,GAAK,GAAK,MAmBxC,OACE,eAAC,WAAD,WACE,qBAAKN,UAAWC,IAAQuB,QAAxB,SACE,yBAAQC,QANe,WAC3Bb,EAAQc,KAAR,UAAgBhB,EAAMiB,IAAtB,iBAAkCX,EAAqB,OAAS,SAK5D,kBACQA,EAAqB,aAAe,iBAG9C,oBAAIhB,UAAWC,IAAQ2B,KAAvB,SACGR,EAAaS,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEExB,GAAIwB,EAAMxB,GACVF,OAAQ0B,EAAM1B,OACdD,KAAM2B,EAAMA,OAHPA,EAAMxB,a,0BCzBRyB,EAXO,WACpB,OACE,sBAAK/B,UAAWC,IAAQ+B,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMhC,UAAU,MAAMK,GAAG,aAAzB,6B,wBCyCS4B,UAxCG,WAChB,IAAMC,EAAUC,qBAAWC,KAC3B,EAKIC,YAAQC,KAAc,GAJxBC,EADF,EACEA,YACAC,EAFF,EAEEA,OACMC,EAHR,EAGEC,KACAC,EAJF,EAIEA,MAWF,OARAC,qBAAU,WACRL,EAAYL,EAAQW,SACnB,CAACN,EAAaL,EAAQW,QAEzBC,uBAAY,WACVP,EAAYL,EAAQW,SACnB,CAACN,EAAaL,EAAQW,QAEV,YAAXL,EAEA,qBAAKxC,UAAU,WAAf,SACE,cAAC+C,EAAA,EAAD,MAKFJ,EACK,mBAAG3C,UAAU,WAAb,SAAyB2C,IAGnB,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaO,OAK3D,cAAC,WAAD,UACE,cAAC,EAAD,CAAWxC,OAAQiC,MALd,cAAC,EAAD","file":"static/js/7.c95b3a1c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","import classes from \"./QuoteItem.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link className=\"btn\" to={`/quotes/${props.id}`}>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from 'react';\nimport { useHistory, useLocation, useRouteMatch } from 'react-router-dom';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const match = useRouteMatch();\n  const History = useHistory();\n  const Location = useLocation();\n\n  const queryParams = new URLSearchParams(Location.search);\n\n  const isSortingAscending = queryParams.get('sort') === 'asc';\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  const changeSortingHandler = () => {\n    History.push(`${match.url}?sort=${isSortingAscending ? 'desc' : 'asc'}`);\n  };\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>\n          Sort {isSortingAscending ? 'Descending' : 'Ascending'}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.quote}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { Link } from \"react-router-dom\";\n\nimport classes from \"./NoQuotesFound.module.css\";\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className=\"btn\" to=\"/new-quote\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { Fragment, useContext, useEffect, useCallback } from 'react';\n\nimport QuoteList from '../components/quotes/QuoteList';\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\nimport useHttp from '../components/hooks/use-http';\nimport { getAllQuotes } from '../components/lib/api';\nimport AuthContext from '../store/auth-context';\n\nconst AllQuotes = () => {\n  const authCtx = useContext(AuthContext);\n  const {\n    sendRequest,\n    status,\n    data: loadedQuotes,\n    error,\n  } = useHttp(getAllQuotes, true);\n\n  useEffect(() => {\n    sendRequest(authCtx.token);\n  }, [sendRequest, authCtx.token]);\n\n  useCallback(() => {\n    sendRequest(authCtx.token);\n  }, [sendRequest, authCtx.token]);\n\n  if (status === 'pending') {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <p className=\"centered\">{error}</p>;\n  }\n\n  if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\n    return <NoQuotesFound />;\n  }\n\n  return (\n    <Fragment>\n      <QuoteList quotes={loadedQuotes} />\n    </Fragment>\n  );\n};\n\nexport default AllQuotes;\n"],"sourceRoot":""}