{"version":3,"sources":["components/auth/AuthForm.module.css","components/auth/AuthForm.js","pages/AuthPage.js"],"names":["module","exports","AuthForm","history","useHistory","useState","showPassword","setShowPassword","isVerified","setIsVerified","authCtx","useContext","AuthContext","emailInputRef","useRef","passwordInputRef","fnameRef","lnameRef","isLogin","setIsLogin","isLoading","setIsLoading","event","a","preventDefault","enteredEmail","current","value","enteredPassword","enteredFName","enteredLName","hashPassword","bcrypt","hashSync","url","user","firstName","lastName","userName","password","roles","fetch","method","body","JSON","stringify","headers","response","json","data","ok","Error","message","then","res","errorMessage","error","experationTime","Date","getTime","login","token","toISOString","replace","catch","err","alert","className","classes","auth","onSubmit","control","htmlFor","type","id","required","ref","onClick","actions","sitekey","render","verifyCallback","onloadCallback","toggle","prevState","AuthPage"],"mappings":"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","file":"static/js/5.bca3e594.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"AuthForm_auth__2ZSKH\",\"control\":\"AuthForm_control__1evQ4\",\"actions\":\"AuthForm_actions__25Vmz\",\"toggle\":\"AuthForm_toggle__1Wxr6\"};","import { useState, useRef, useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport bcrypt from 'bcryptjs';\nimport Recaptcha from 'react-recaptcha';\n\nimport AuthContext from '../../store/auth-context';\nimport classes from './AuthForm.module.css';\n\nconst AuthForm = () => {\n  const history = useHistory();\n\n  const [showPassword, setShowPassword] = useState(false);\n  const [isVerified, setIsVerified] = useState(false);\n  const authCtx = useContext(AuthContext);\n\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef();\n  const fnameRef = useRef();\n  const lnameRef = useRef();\n\n  const [isLogin, setIsLogin] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const switchAuthModeHandler = () => {\n    setIsLogin((prevState) => !prevState);\n  };\n\n  const toggleShowPassword = () => {\n    if (showPassword) setShowPassword(false);\n    if (!showPassword) setShowPassword(true);\n  };\n\n  const verifyCallback = () => {\n    setIsVerified(true);\n  };\n  const load = () => {\n    setIsVerified(false);\n  };\n\n  async function submitionHandler(event) {\n    event.preventDefault();\n    if (isVerified) {\n      const enteredEmail = emailInputRef.current.value;\n      const enteredPassword = passwordInputRef.current.value;\n      let url;\n      if (!isLogin) {\n        const enteredFName = fnameRef.current.value;\n        const enteredLName = lnameRef.current.value;\n        const hashPassword = bcrypt.hashSync(enteredPassword, 10);\n\n        url =\n          'http://ec2-13-233-232-148.ap-south-1.compute.amazonaws.com:8080/v1/signup';\n        const user = {\n          firstName: enteredFName,\n          lastName: enteredLName,\n          userName: enteredEmail,\n          password: hashPassword,\n          roles: [5],\n        };\n        // console.log(user);\n        const response = await fetch(url, {\n          method: 'POST',\n          body: JSON.stringify(user),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n        const data = await response.json();\n        // console.log(response);\n\n        if (!response.ok) {\n          throw new Error(data.message || 'Could not add comment.');\n        }\n      }\n\n      setIsLoading(true);\n\n      url =\n        'http://ec2-13-233-232-148.ap-south-1.compute.amazonaws.com:8080/api/v1/auth/login'; //login send req url\n      fetch(url, {\n        method: 'POST',\n        body: JSON.stringify({\n          userName: enteredEmail,\n          password: enteredPassword,\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n        .then((res) => {\n          setIsLoading(false);\n          if (res.ok) {\n            return res.json();\n          } else {\n            return res.json().then((data) => {\n              let errorMessage = 'Authentication Failed';\n              if (data && data.error && data.error.message) {\n                errorMessage = data.error.message;\n              }\n              throw new Error(errorMessage);\n            });\n          }\n        })\n        .then((data) => {\n          const experationTime = new Date(new Date().getTime() + +36000000);\n          authCtx.login(data.token, experationTime.toISOString());\n          history.replace('/');\n        })\n        .catch((err) => {\n          alert(err.message);\n        });\n    } else {\n      alert('Verify that you are not a robot');\n    }\n  }\n\n  return (\n    <section className={classes.auth}>\n      <h1>{isLogin ? 'Login' : 'Sign Up'}</h1>\n\n      <form onSubmit={submitionHandler}>\n        {!isLogin && (\n          <div className={classes.control}>\n            <label htmlFor=\"firstName\">Your First Name</label>\n            <input type=\"firstName\" id=\"firstName\" required ref={fnameRef} />\n          </div>\n        )}\n        {!isLogin && (\n          <div className={classes.control}>\n            <label htmlFor=\"lastName\">Your Last Name</label>\n            <input type=\"name\" id=\"LastName\" required ref={lnameRef} />\n          </div>\n        )}\n        <div className={classes.control}>\n          <label htmlFor=\"email\">Your Email</label>\n          <input type=\"userName\" id=\"userName\" required ref={emailInputRef} />\n        </div>\n        <div className={classes.control}>\n          <label htmlFor=\"password\">Your Password</label>\n          <input\n            type={showPassword ? 'text' : 'password'}\n            id=\"password\"\n            required\n            ref={passwordInputRef}\n          />\n        </div>\n        <input type=\"checkbox\" onClick={toggleShowPassword} /> Show Password\n        <div className={classes.actions}>\n          <div>\n            <Recaptcha\n              sitekey=\"6Lc-ulQiAAAAABhKNCmKmoGU_KlxbzPT0FXWxSBx\"\n              render=\"explicit\"\n              verifyCallback={verifyCallback}\n              onloadCallback={load}\n            />\n          </div>\n          <br />\n          {!isLoading && (\n            <button>{isLogin ? 'Login' : 'Create Account'}</button>\n          )}\n          {isLoading && <p>Sending Request....</p>}\n          <button\n            type=\"button\"\n            className={classes.toggle}\n            onClick={switchAuthModeHandler}\n          >\n            {isLogin ? 'Create new account' : 'Login with existing account'}\n          </button>\n        </div>\n      </form>\n    </section>\n  );\n};\n\nexport default AuthForm;\n","import AuthForm from '../components/auth/AuthForm';\n\nconst AuthPage = () => {\n  return <AuthForm />;\n};\n\nexport default AuthPage;\n"],"sourceRoot":""}